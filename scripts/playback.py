# Copyright (C) 2016 David Freiberger. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
# ==============================================================================

from __future__ import print_function
from collections import defaultdict
import os
import sys
import cv2
import argparse
import pandas as pd
import datetime as dt
import numpy as np

def drawtext(center_img, offset, text):
    """ Method to draw text overlay onto an image """
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(center_img,text,(10,400+offset),font,.5,(0,255,0),1,cv2.LINE_AA)

def main():
    """ Main method 
        Description: reads left, center, and right image paths from the csv file 
                generated by the bagdump.py script, and plays them back using
                open cv. Also overlays information from the steering.csv file onto the
                center image.
    """
    parser = argparse.ArgumentParser(description='Playback images from folder with stats overlaid.')
    parser.add_argument('-i', '--input_dir', type=str, nargs='?', default='./',
        help='Folder containing camera.csv and steering.csv files')

    args = parser.parse_args()
    base_dir = args.input_dir

    camera_df = pd.read_csv(os.path.join(base_dir, 'camera.csv'))
    steering_df = pd.read_csv(os.path.join(base_dir, 'steering.csv'))

    left_image_df = camera_df[camera_df['frame_id'] == 'left_camera'].itertuples()
    center_image_df = camera_df[camera_df['frame_id'] == 'center_camera'].itertuples()
    right_image_df = camera_df[camera_df['frame_id'] == 'right_camera'].itertuples()
    
    cv2.namedWindow('left-image')
    cv2.moveWindow('left-image', 0, 0)
    cv2.namedWindow('center-image')
    cv2.moveWindow('center-image', 640, 0)
    cv2.namedWindow('right-image')
    cv2.moveWindow('right-image', 1280, 0)

    # iterate through all images
    for left, center, right in zip(left_image_df, center_image_df, right_image_df):
        # steering data, obtained by looking at the record with timestamp closest to image
        # probably not the best way to do it
        nsd = steering_df.iloc[(steering_df.timestamp-center.timestamp).abs().argsort()[:1]].iloc[0]
      
        # show the left and right images
        left_img = cv2.imread(os.path.join(base_dir, left.filename))
        cv2.imshow('left-image',left_img)
        right_img = cv2.imread(os.path.join(base_dir, right.filename))
        cv2.imshow('right-image',right_img)

        # center image
        center_img = cv2.imread(os.path.join(base_dir, center.filename))
        height, width, channels = center_img.shape

        # draw overlay
        r = height/3
        angle = nsd.angle + np.pi/2
        # top of line
        p0 = (int(width/2+r*np.cos(angle)),int(height-r*np.sin(angle)))
        # bottom of line
        p1 = (width//2, height)
        center_img = cv2.line(center_img,p0,p1,(0,255,0),1)
        
        drawtext(center_img,0,"timestamp: %s" % str(dt.datetime.fromtimestamp(nsd.timestamp/1e9)))
        drawtext(center_img,20,"angle: %g" % nsd.angle)
        drawtext(center_img,40,"torque: %f" % nsd.torque)
        drawtext(center_img,60,"speed: %f" % nsd.speed)

        cv2.imshow('center-image',center_img)

        cv2.waitKey(15)
     
    # cleanup   
    cv2.destroyAllWindows()
        
if __name__ == '__main__':
    main()